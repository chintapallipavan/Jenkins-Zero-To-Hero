pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.docker:/root/.docker'
    }
  }
  environment {
    DOCKER_CONFIG = '/root/.docker'  // Specify writable directory for Docker metadata
    SONAR_URL = "http://34.205.30.198:9000"
  }
  stages {
    stage('Checkout') {
      steps {
        echo 'Checkout stage passed'
        // Uncomment to enable Git checkout
        // git branch: 'main', url: 'https://github.com/chintapallipavan/Jenkins-Zero-To-Hero'
      }
    }
    stage('Build and Test') {
      steps {
        sh '''
          echo "Listing files in workspace..."
          ls -ltr
          echo "Building Maven project..."
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            echo "Running SonarQube analysis..."
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "chinthapallipavankumar099/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')  // Ensure 'docker-cred' is set in Jenkins credentials
      }
      steps {
        script {
          // Use the docker.withRegistry block to login using Jenkins credentials
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            // Build the Docker image
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            // Push the Docker image
            dockerImage.push()
          }
        }
      }
    }
   stage('Update Deployment File') {
  environment {
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "chintapallipavan"  // Your GitHub username
    GITHUB_USERNAME = "chinthapallipavankumar@gmail.com"  // GitHub username for authentication
    GITHUB_PASSWORD = "your_personal_access_token"  // Use a GitHub token instead of a password
  }
  steps {
    script {
      echo "Updating Kubernetes deployment manifest..."
      // Configure Git user settings
      sh '''
        git config user.email "chinthapallipavankumar@gmail.com"
        git config user.name "chintapallipavan"
        cd java-maven-sonar-argocd-helm-k8s
        # Replace the image tag in the deployment file
        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
        git add spring-boot-app-manifests/deployment.yml
        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
        git push https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
      '''
    }
  }
}
